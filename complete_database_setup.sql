-- =====================================================
-- IntelliSystem Complete Database Setup Script
-- Version: 2.0 (Production Accurate)
-- Date: September 2025
-- Description: Exact replica of production database schema
--              with all tables, relations, indexes, and seed data
-- =====================================================

-- Create database (run as superuser if needed)
-- CREATE DATABASE intelli_system;
-- \c intelli_system;

-- =====================================================
-- CLEANUP (for fresh installation)
-- =====================================================
DROP SCHEMA IF EXISTS public CASCADE;
CREATE SCHEMA public;
GRANT ALL ON SCHEMA public TO postgres;
GRANT ALL ON SCHEMA public TO public;

-- =====================================================
-- ENUM TYPES
-- =====================================================
CREATE TYPE admin_role AS ENUM ('admin', 'superadmin');

-- =====================================================
-- FUNCTIONS (Required for triggers and constraints)
-- =====================================================

-- Function to check if parameter can be deleted
CREATE OR REPLACE FUNCTION can_delete_parameter(param_id character varying) RETURNS boolean
    LANGUAGE plpgsql
    AS $$
DECLARE
    lab_count INTEGER;
    demographic_count INTEGER;
    bio_age_count INTEGER;
    penalty_count INTEGER;
BEGIN
    -- Check lab_parameters
    SELECT COUNT(*) INTO lab_count
    FROM lab_parameters lp
    JOIN parameter_master pm ON lp.parameter_name = pm.parameter_key
    WHERE pm.parameter_id = param_id;
    
    -- Check demographic_averages
    SELECT COUNT(*) INTO demographic_count
    FROM demographic_averages
    WHERE parameter_id = param_id;
    
    -- Check bio_age_rules
    SELECT COUNT(*) INTO bio_age_count
    FROM bio_age_rules
    WHERE parameter_id = param_id;
    
    -- Check health_penalty_rules
    SELECT COUNT(*) INTO penalty_count
    FROM health_penalty_rules
    WHERE parameter_id = param_id;
    
    RETURN (lab_count = 0 AND demographic_count = 0 AND bio_age_count = 0 AND penalty_count = 0);
END;
$$;

-- Function for audit triggers
CREATE OR REPLACE FUNCTION health_index_audit_trigger() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
BEGIN
  IF TG_OP = 'INSERT' THEN
    INSERT INTO health_index_config_audit(table_name, record_id, action, new_values, changed_by)
    VALUES (TG_TABLE_NAME, NEW.id, TG_OP, row_to_json(NEW), current_user);
    RETURN NEW;
  ELSIF TG_OP = 'UPDATE' THEN
    INSERT INTO health_index_config_audit(table_name, record_id, action, old_values, new_values, changed_by)
    VALUES (TG_TABLE_NAME, NEW.id, TG_OP, row_to_json(OLD), row_to_json(NEW), current_user);
    RETURN NEW;
  ELSIF TG_OP = 'DELETE' THEN
    INSERT INTO health_index_config_audit(table_name, record_id, action, old_values, changed_by)
    VALUES (TG_TABLE_NAME, OLD.id, TG_OP, row_to_json(OLD), current_user);
    RETURN OLD;
  END IF;
END;
$$;

-- Function to prevent parameter deletion
CREATE OR REPLACE FUNCTION prevent_parameter_deletion() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
BEGIN
    IF NOT can_delete_parameter(OLD.parameter_id) THEN
        RAISE EXCEPTION 'Cannot delete parameter % - it has existing data references', OLD.parameter_id;
    END IF;
    RETURN OLD;
END;
$$;

-- =====================================================
-- TABLES CREATION (Order matters for foreign keys)
-- =====================================================

-- 1. Companies table
CREATE TABLE companies (
    id integer NOT NULL PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY,
    company_id character varying(50) NOT NULL UNIQUE,
    company_name character varying(255) NOT NULL,
    contact_email character varying(255),
    employee_count integer,
    created_at timestamp without time zone DEFAULT CURRENT_TIMESTAMP
);

-- 2. Users table
CREATE TABLE users (
    id integer NOT NULL PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY,
    user_id character varying(50) NOT NULL UNIQUE,
    email character varying(255) NOT NULL UNIQUE,
    phone character varying(20),
    first_name character varying(100) NOT NULL,
    last_name character varying(100) NOT NULL,
    date_of_birth date,
    gender character varying(10),
    company_id character varying(50) NOT NULL,
    password_hash character varying(255),
    first_login boolean DEFAULT true,
    email_verified boolean DEFAULT false,
    uhid character varying(50) UNIQUE,
    location character varying(100) DEFAULT 'Hanoi',
    created_at timestamp without time zone DEFAULT CURRENT_TIMESTAMP,
    updated_at timestamp without time zone DEFAULT CURRENT_TIMESTAMP,
    last_login timestamp without time zone,
    CONSTRAINT users_company_id_fkey FOREIGN KEY (company_id) 
        REFERENCES companies(company_id) ON UPDATE CASCADE ON DELETE RESTRICT,
    CONSTRAINT users_gender_check CHECK ((gender = ANY (ARRAY['Male', 'Female', 'Other'])))
);

-- 3. Admin Users table (WITH USERNAME COLUMN - CRITICAL!)
CREATE TABLE admin_users (
    id integer NOT NULL PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY,
    name character varying(100) NOT NULL,
    email character varying(100) NOT NULL UNIQUE,
    password character varying(255) NOT NULL,
    role admin_role DEFAULT 'admin' NOT NULL,
    created_at timestamp without time zone DEFAULT CURRENT_TIMESTAMP,
    updated_at timestamp without time zone DEFAULT CURRENT_TIMESTAMP,
    username character varying(255)  -- THIS IS THE MISSING COLUMN!
);

-- 4. Corporate Users table
CREATE TABLE corporate_users (
    id integer NOT NULL PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY,
    username character varying(50) NOT NULL UNIQUE,
    password character varying(255) NOT NULL,
    full_name character varying(100),
    email character varying(100),
    company_id character varying(50),
    role character varying(20) DEFAULT 'hr',
    is_active boolean DEFAULT true,
    created_at timestamp without time zone DEFAULT CURRENT_TIMESTAMP,
    CONSTRAINT corporate_users_company_id_fkey FOREIGN KEY (company_id)
        REFERENCES companies(company_id) ON UPDATE CASCADE ON DELETE RESTRICT
);

-- 5. Parameter Master table
CREATE TABLE parameter_master (
    id integer NOT NULL PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY,
    parameter_id character varying(20) NOT NULL UNIQUE,
    parameter_key character varying(100) NOT NULL,
    unit character varying(50),
    reference_min double precision,
    reference_max double precision,
    parameter_priority integer DEFAULT 1,
    reference_min_male double precision,
    reference_max_male double precision,
    reference_min_female double precision,
    reference_max_female double precision,
    parameter_key_vi character varying(100),
    created_at timestamp without time zone DEFAULT CURRENT_TIMESTAMP,
    updated_at timestamp without time zone DEFAULT CURRENT_TIMESTAMP
);

-- 6. Parameter Categories table
CREATE TABLE parameter_categories (
    id integer NOT NULL PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY,
    category_id character varying(20) NOT NULL UNIQUE,
    category_name character varying(100) NOT NULL,
    category_name_vi character varying(100),
    display_order integer DEFAULT 1,
    is_active boolean DEFAULT true,
    created_at timestamp without time zone DEFAULT CURRENT_TIMESTAMP,
    updated_at timestamp without time zone DEFAULT CURRENT_TIMESTAMP
);

-- 7. Parameter Category Mappings
CREATE TABLE parameter_category_mappings (
    id integer NOT NULL PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY,
    parameter_id character varying(20),
    category_id character varying(20),
    created_at timestamp without time zone DEFAULT CURRENT_TIMESTAMP,
    CONSTRAINT parameter_category_mappings_category_id_fkey FOREIGN KEY (category_id)
        REFERENCES parameter_categories(category_id) ON UPDATE CASCADE ON DELETE CASCADE,
    CONSTRAINT parameter_category_mappings_parameter_id_fkey FOREIGN KEY (parameter_id)
        REFERENCES parameter_master(parameter_id) ON UPDATE CASCADE ON DELETE CASCADE,
    CONSTRAINT parameter_category_mappings_parameter_id_category_id_key UNIQUE (parameter_id, category_id)
);

-- 8. User Reports table
CREATE TABLE user_reports (
    id integer NOT NULL PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY,
    report_id character varying(100) NOT NULL UNIQUE,
    user_id character varying(50) NOT NULL,
    health_score integer,
    biological_age integer,
    test_date date NOT NULL,
    report_status character varying(20) DEFAULT 'active',
    score_breakdown jsonb,
    created_at timestamp without time zone DEFAULT CURRENT_TIMESTAMP,
    updated_at timestamp without time zone DEFAULT CURRENT_TIMESTAMP,
    test_type character varying(50),
    CONSTRAINT user_reports_user_id_fkey FOREIGN KEY (user_id)
        REFERENCES users(user_id) ON UPDATE CASCADE ON DELETE CASCADE,
    CONSTRAINT user_reports_health_score_check CHECK ((health_score >= 0) AND (health_score <= 100))
);

-- 9. Lab Parameters table
CREATE TABLE lab_parameters (
    id integer NOT NULL PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY,
    report_id character varying(100),
    parameter_name character varying(100),
    parameter_value character varying(50),
    unit character varying(50),
    reference_min double precision,
    reference_max double precision,
    status character varying(20),
    category character varying(50),
    is_abnormal boolean,
    CONSTRAINT lab_parameters_report_id_fkey FOREIGN KEY (report_id)
        REFERENCES user_reports(report_id) ON UPDATE CASCADE ON DELETE CASCADE
);

-- 10. Batch Uploads table
CREATE TABLE batch_uploads (
    id integer NOT NULL PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY,
    batch_id character varying(50) NOT NULL UNIQUE,
    filename character varying(255) NOT NULL,
    uploaded_by character varying(100) NOT NULL,
    status character varying(20) DEFAULT 'uploaded',
    total_records integer DEFAULT 0,
    valid_records integer DEFAULT 0,
    error_records integer DEFAULT 0,
    error_details jsonb,
    created_at timestamp without time zone DEFAULT CURRENT_TIMESTAMP,
    file_path character varying(500)  -- Added for file download feature
);

-- 11. Batch Records table
CREATE TABLE batch_records (
    id integer NOT NULL PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY,
    batch_id character varying(50),
    row_number integer,
    user_data jsonb,
    validation_status character varying(20),
    error_message text,
    processed boolean DEFAULT false,
    CONSTRAINT batch_records_batch_id_fkey FOREIGN KEY (batch_id)
        REFERENCES batch_uploads(batch_id) ON UPDATE CASCADE ON DELETE CASCADE
);

-- 12. Health Index Parameters
CREATE TABLE health_index_parameters (
    id integer NOT NULL PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY,
    parameter_id character varying(20),
    direction character varying(20),
    pmax numeric(6,2) DEFAULT 75,
    k_full numeric(4,3) DEFAULT 0.25,
    weight numeric(4,2) DEFAULT 1.0,
    is_active boolean DEFAULT true,
    created_at timestamp without time zone DEFAULT CURRENT_TIMESTAMP,
    updated_at timestamp without time zone DEFAULT CURRENT_TIMESTAMP,
    CONSTRAINT health_index_parameters_parameter_id_key UNIQUE (parameter_id),
    CONSTRAINT health_index_parameters_parameter_id_fkey FOREIGN KEY (parameter_id)
        REFERENCES parameter_master(parameter_id) ON UPDATE CASCADE ON DELETE CASCADE,
    CONSTRAINT health_index_parameters_direction_check CHECK (direction IN ('high_bad', 'low_bad', 'two_sided'))
);

-- 13. Health Index Combinations
CREATE TABLE health_index_combinations (
    id integer NOT NULL PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY,
    combination_name character varying(100),
    rule_type character varying(50),
    parameters text[],
    threshold numeric(10,2),
    penalty numeric(6,2),
    is_active boolean DEFAULT true,
    created_at timestamp without time zone DEFAULT CURRENT_TIMESTAMP,
    updated_at timestamp without time zone DEFAULT CURRENT_TIMESTAMP
);

-- 14. Health Index Config Audit
CREATE TABLE health_index_config_audit (
    id integer NOT NULL PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY,
    table_name character varying(50),
    record_id integer,
    action character varying(20),
    old_values jsonb,
    new_values jsonb,
    changed_by character varying(100),
    changed_at timestamp without time zone DEFAULT CURRENT_TIMESTAMP,
    parameter_id character varying(20),
    change_type character varying(50)
);

-- 15. User Deletion Audit
CREATE TABLE user_deletion_audit (
    id integer NOT NULL PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY,
    operation_type character varying(50) NOT NULL,
    user_id character varying(255),
    company_id character varying(50),
    deleted_count integer,
    deleted_by_admin_id integer,
    deleted_at timestamp without time zone DEFAULT CURRENT_TIMESTAMP,
    ip_address character varying(50),
    additional_info jsonb,
    CONSTRAINT user_deletion_audit_deleted_by_admin_id_fkey FOREIGN KEY (deleted_by_admin_id)
        REFERENCES admin_users(id) ON UPDATE CASCADE ON DELETE SET NULL
);

-- 16. Risk Assessments
CREATE TABLE risk_assessments (
    id integer NOT NULL PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY,
    user_id character varying(50),
    assessment_type character varying(50),
    assessment_date date,
    risk_score numeric(10,2),
    risk_category character varying(50),
    assessment_data jsonb,
    created_at timestamp without time zone DEFAULT CURRENT_TIMESTAMP,
    CONSTRAINT risk_assessments_user_id_fkey FOREIGN KEY (user_id)
        REFERENCES users(user_id) ON UPDATE CASCADE ON DELETE CASCADE
);

-- 17. Corporate Health Metrics
CREATE TABLE corporate_health_metrics (
    id integer NOT NULL PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY,
    company_id character varying(50),
    metric_date date,
    total_employees integer,
    health_checks_completed integer,
    average_health_score numeric(5,2),
    risk_distribution jsonb,
    demographic_data jsonb,
    created_at timestamp without time zone DEFAULT CURRENT_TIMESTAMP,
    CONSTRAINT corporate_health_metrics_company_id_fkey FOREIGN KEY (company_id)
        REFERENCES companies(company_id) ON UPDATE CASCADE ON DELETE CASCADE
);

-- 18. Demographic Averages
CREATE TABLE demographic_averages (
    id integer NOT NULL PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY,
    parameter_id character varying(20),
    category character varying(50),
    average_value double precision,
    median_value double precision,
    sample_size integer,
    created_at timestamp without time zone DEFAULT CURRENT_TIMESTAMP,
    updated_at timestamp without time zone DEFAULT CURRENT_TIMESTAMP
);

-- 19. Bio Age Rules
CREATE TABLE bio_age_rules (
    id integer NOT NULL PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY,
    parameter_id character varying(20),
    condition_type character varying(50),
    threshold_value double precision,
    age_impact double precision,
    is_active boolean DEFAULT true,
    created_at timestamp without time zone DEFAULT CURRENT_TIMESTAMP,
    updated_at timestamp without time zone DEFAULT CURRENT_TIMESTAMP,
    CONSTRAINT bio_age_rules_parameter_id_fkey FOREIGN KEY (parameter_id)
        REFERENCES parameter_master(parameter_id) ON UPDATE CASCADE ON DELETE CASCADE
);

-- 20. Health Penalty Rules
CREATE TABLE health_penalty_rules (
    id integer NOT NULL PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY,
    parameter_id character varying(20),
    condition_type character varying(50),
    threshold_value double precision,
    penalty_points double precision,
    is_active boolean DEFAULT true,
    created_at timestamp without time zone DEFAULT CURRENT_TIMESTAMP,
    updated_at timestamp without time zone DEFAULT CURRENT_TIMESTAMP,
    CONSTRAINT health_penalty_rules_parameter_id_fkey FOREIGN KEY (parameter_id)
        REFERENCES parameter_master(parameter_id) ON UPDATE CASCADE ON DELETE CASCADE
);

-- 21. Health Safety Rules
CREATE TABLE health_safety_rules (
    id integer NOT NULL PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY,
    parameter_id character varying(20),
    condition_type character varying(50),
    threshold_value double precision,
    safety_points double precision,
    is_active boolean DEFAULT true,
    created_at timestamp without time zone DEFAULT CURRENT_TIMESTAMP,
    updated_at timestamp without time zone DEFAULT CURRENT_TIMESTAMP,
    CONSTRAINT health_safety_rules_parameter_id_fkey FOREIGN KEY (parameter_id)
        REFERENCES parameter_master(parameter_id) ON UPDATE CASCADE ON DELETE CASCADE
);

-- 22. Health Condition Rules
CREATE TABLE health_condition_rules (
    id integer NOT NULL PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY,
    rule_name character varying(100),
    parameters jsonb,
    condition_logic text,
    impact_score double precision,
    is_active boolean DEFAULT true,
    created_at timestamp without time zone DEFAULT CURRENT_TIMESTAMP,
    updated_at timestamp without time zone DEFAULT CURRENT_TIMESTAMP
);

-- 23. Corporate Action Plans
CREATE TABLE corporate_action_plans (
    id integer NOT NULL PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY,
    company_id character varying(50),
    plan_data jsonb,
    created_at timestamp without time zone DEFAULT CURRENT_TIMESTAMP,
    updated_at timestamp without time zone DEFAULT CURRENT_TIMESTAMP,
    CONSTRAINT corporate_action_plans_company_id_fkey FOREIGN KEY (company_id)
        REFERENCES companies(company_id) ON UPDATE CASCADE ON DELETE CASCADE
);

-- 24. Company Year Employees
CREATE TABLE company_year_employees (
    id integer NOT NULL PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY,
    company_id character varying(50),
    year integer,
    employee_count integer,
    created_at timestamp without time zone DEFAULT CURRENT_TIMESTAMP,
    updated_at timestamp without time zone DEFAULT CURRENT_TIMESTAMP,
    CONSTRAINT company_year_employees_company_id_fkey FOREIGN KEY (company_id)
        REFERENCES companies(company_id) ON UPDATE CASCADE ON DELETE CASCADE
);

-- =====================================================
-- INDEXES FOR PERFORMANCE
-- =====================================================

CREATE INDEX idx_admin_users_email ON admin_users(email);
CREATE INDEX idx_admin_users_username ON admin_users(username);
CREATE INDEX idx_batch_records_batch_id ON batch_records(batch_id);
CREATE INDEX idx_batch_uploads_batch_id ON batch_uploads(batch_id);
CREATE INDEX idx_batch_uploads_status ON batch_uploads(status);
CREATE INDEX idx_corporate_health_metrics_company_id ON corporate_health_metrics(company_id);
CREATE INDEX idx_corporate_health_metrics_metric_date ON corporate_health_metrics(metric_date);
CREATE INDEX idx_demographic_averages_parameter_id ON demographic_averages(parameter_id);
CREATE INDEX idx_health_index_parameters_parameter_id ON health_index_parameters(parameter_id);
CREATE INDEX idx_lab_parameters_report_id ON lab_parameters(report_id);
CREATE INDEX idx_lab_parameters_parameter_name ON lab_parameters(parameter_name);
CREATE INDEX idx_risk_assessments_user_id ON risk_assessments(user_id);
CREATE INDEX idx_user_reports_user_id ON user_reports(user_id);
CREATE INDEX idx_user_reports_test_date ON user_reports(test_date);
CREATE INDEX idx_users_company_id ON users(company_id);
CREATE INDEX idx_users_email ON users(email);
CREATE INDEX idx_users_user_id ON users(user_id);

-- =====================================================
-- VIEWS
-- =====================================================

CREATE OR REPLACE VIEW parameter_usage_status AS
SELECT 
    pm.parameter_id,
    pm.parameter_key,
    COUNT(DISTINCT lp.report_id) as usage_count,
    CASE 
        WHEN COUNT(DISTINCT lp.report_id) = 0 THEN 'can_delete'
        ELSE 'in_use'
    END as deletion_eligibility
FROM parameter_master pm
LEFT JOIN lab_parameters lp ON pm.parameter_key = lp.parameter_name
GROUP BY pm.parameter_id, pm.parameter_key;

-- =====================================================
-- TRIGGERS
-- =====================================================

CREATE TRIGGER health_index_parameters_audit_trigger 
    AFTER INSERT OR DELETE OR UPDATE ON health_index_parameters 
    FOR EACH ROW EXECUTE FUNCTION health_index_audit_trigger();

CREATE TRIGGER health_index_combinations_audit_trigger 
    AFTER INSERT OR DELETE OR UPDATE ON health_index_combinations 
    FOR EACH ROW EXECUTE FUNCTION health_index_audit_trigger();

CREATE TRIGGER prevent_parameter_deletion_trigger 
    BEFORE DELETE ON parameter_master 
    FOR EACH ROW EXECUTE FUNCTION prevent_parameter_deletion();

-- =====================================================
-- SEED DATA (Essential for system operation)
-- =====================================================

-- Insert companies
INSERT INTO companies (company_id, company_name, contact_email, employee_count) VALUES
('CUG1', 'Insmart Vietnam', 'hr@insmart.vn', 500),
('DEMO001', 'Demo Corporation', 'hr@democorp.com', 100),
('TEST001', 'Test Industries', 'admin@testind.com', 50)
ON CONFLICT (company_id) DO NOTHING;

-- Insert admin users with username (password: 'admin123')
-- IMPORTANT: Replace $2b$10$... with actual bcrypt hash of your password
INSERT INTO admin_users (name, email, username, password, role) VALUES
('System Admin', 'admin@system.com', 'admin', '$2b$10$8K1p/rPx.yP4ZgFYvLKEd.LqCqEbh5XnDx4YBQv5hb2yYBzAqmGCi', 'superadmin'),
('Demo Admin', 'demo@admin.com', 'demoadmin', '$2b$10$8K1p/rPx.yP4ZgFYvLKEd.LqCqEbh5XnDx4YBQv5hb2yYBzAqmGCi', 'admin')
ON CONFLICT (email) DO NOTHING;

-- Insert corporate users (password: 'corp123')
INSERT INTO corporate_users (username, password, full_name, email, company_id, role) VALUES
('insmart_hr', '$2b$10$8K1p/rPx.yP4ZgFYvLKEd.LqCqEbh5XnDx4YBQv5hb2yYBzAqmGCi', 'Insmart HR Manager', 'hr@insmart.vn', 'CUG1', 'hr'),
('demo_hr', '$2b$10$8K1p/rPx.yP4ZgFYvLKEd.LqCqEbh5XnDx4YBQv5hb2yYBzAqmGCi', 'Demo HR Manager', 'hr@democorp.com', 'DEMO001', 'hr')
ON CONFLICT (username) DO NOTHING;

-- Insert parameter categories
INSERT INTO parameter_categories (category_id, category_name, category_name_vi, display_order, is_active) VALUES
('CAT001', 'Hematology', 'Huyết học', 1, true),
('CAT002', 'Biochemistry', 'Sinh hóa', 2, true),
('CAT003', 'Lipid Profile', 'Mỡ máu', 3, true),
('CAT004', 'Liver Function', 'Chức năng gan', 4, true),
('CAT005', 'Kidney Function', 'Chức năng thận', 5, true),
('CAT006', 'Cardiac Markers', 'Chỉ số tim', 6, true),
('CAT007', 'Diabetes Markers', 'Chỉ số tiểu đường', 7, true),
('CAT008', 'Vitamins', 'Vitamin', 8, true),
('CAT009', 'Hormones', 'Nội tiết', 9, true),
('CAT010', 'Immunology', 'Miễn dịch', 10, true)
ON CONFLICT (category_id) DO NOTHING;

-- Insert essential parameter master data
INSERT INTO parameter_master (parameter_id, parameter_key, parameter_key_vi, unit, 
    reference_min_male, reference_max_male, reference_min_female, reference_max_female, parameter_priority) VALUES
('P1', 'Hemoglobin', 'Hemoglobin', 'g/dL', 13.5, 17.5, 12.0, 15.5, 1),
('P2', 'RBC Count', 'Số lượng hồng cầu', 'million/μL', 4.5, 5.9, 4.1, 5.1, 2),
('P3', 'WBC Count', 'Số lượng bạch cầu', '10³/μL', 4.5, 11.0, 4.5, 11.0, 3),
('P4', 'Platelet Count', 'Số lượng tiểu cầu', '10³/μL', 150, 400, 150, 400, 4),
('P5', 'Fasting Glucose', 'Đường huyết lúc đói', 'mg/dL', 70, 100, 70, 100, 5),
('P6', 'HbA1c', 'HbA1c', '%', 4.0, 5.6, 4.0, 5.6, 6),
('P7', 'Total Cholesterol', 'Cholesterol toàn phần', 'mg/dL', 0, 200, 0, 200, 7),
('P8', 'LDL Cholesterol', 'LDL Cholesterol', 'mg/dL', 0, 100, 0, 100, 8),
('P9', 'HDL Cholesterol', 'HDL Cholesterol', 'mg/dL', 40, 200, 50, 200, 9),
('P10', 'Triglycerides', 'Triglycerid', 'mg/dL', 0, 150, 0, 150, 10),
('P11', 'ALT (SGPT)', 'ALT (SGPT)', 'U/L', 10, 40, 10, 35, 11),
('P12', 'AST (SGOT)', 'AST (SGOT)', 'U/L', 10, 40, 10, 35, 12),
('P13', 'Creatinine', 'Creatinine', 'mg/dL', 0.7, 1.3, 0.6, 1.1, 13),
('P14', 'Urea', 'Urê', 'mg/dL', 17, 43, 17, 43, 14),
('P15', 'Uric Acid', 'Acid Uric', 'mg/dL', 3.5, 7.2, 2.6, 6.0, 15),
('P16', 'Vitamin D', 'Vitamin D', 'ng/mL', 30, 100, 30, 100, 16),
('P17', 'Vitamin B12', 'Vitamin B12', 'pg/mL', 200, 900, 200, 900, 17),
('P18', 'TSH', 'TSH', 'mIU/L', 0.4, 4.0, 0.4, 4.0, 18),
('P19', 'Systolic BP', 'Huyết áp tâm thu', 'mmHg', 90, 120, 90, 120, 19),
('P20', 'Diastolic BP', 'Huyết áp tâm trương', 'mmHg', 60, 80, 60, 80, 20),
('P21', 'BMI', 'Chỉ số BMI', 'kg/m²', 18.5, 24.9, 18.5, 24.9, 21),
('P22', 'Waist Circumference', 'Vòng eo', 'cm', 0, 94, 0, 80, 22),
('P23', 'Body Fat Percentage', 'Tỷ lệ mỡ cơ thể', '%', 8, 25, 21, 35, 23),
('P24', 'Calcium', 'Canxi', 'mg/dL', 8.5, 10.5, 8.5, 10.5, 24),
('P25', 'Iron', 'Sắt', 'μg/dL', 65, 175, 50, 150, 25)
ON CONFLICT (parameter_id) DO NOTHING;

-- Map parameters to categories
INSERT INTO parameter_category_mappings (parameter_id, category_id) VALUES
('P1', 'CAT001'), ('P2', 'CAT001'), ('P3', 'CAT001'), ('P4', 'CAT001'),
('P5', 'CAT007'), ('P6', 'CAT007'),
('P7', 'CAT003'), ('P8', 'CAT003'), ('P9', 'CAT003'), ('P10', 'CAT003'),
('P11', 'CAT004'), ('P12', 'CAT004'),
('P13', 'CAT005'), ('P14', 'CAT005'), ('P15', 'CAT005'),
('P16', 'CAT008'), ('P17', 'CAT008'),
('P18', 'CAT009'),
('P19', 'CAT006'), ('P20', 'CAT006'),
('P21', 'CAT002'), ('P22', 'CAT002'), ('P23', 'CAT002'),
('P24', 'CAT002'), ('P25', 'CAT001')
ON CONFLICT (parameter_id, category_id) DO NOTHING;

-- Insert health index parameters configuration
INSERT INTO health_index_parameters (parameter_id, direction, pmax, k_full, weight, is_active) VALUES
('P1', 'low_bad', 75, 0.25, 1.0, true),
('P5', 'high_bad', 75, 0.25, 1.5, true),
('P6', 'high_bad', 80, 0.30, 2.0, true),
('P7', 'high_bad', 70, 0.25, 1.2, true),
('P8', 'high_bad', 75, 0.25, 1.3, true),
('P9', 'low_bad', 70, 0.25, 1.1, true),
('P10', 'high_bad', 75, 0.25, 1.2, true),
('P11', 'high_bad', 60, 0.20, 0.8, true),
('P12', 'high_bad', 60, 0.20, 0.8, true),
('P13', 'high_bad', 70, 0.25, 1.0, true),
('P15', 'high_bad', 65, 0.25, 0.9, true),
('P16', 'low_bad', 60, 0.20, 0.7, true),
('P19', 'two_sided', 80, 0.30, 1.5, true),
('P20', 'two_sided', 80, 0.30, 1.5, true),
('P21', 'two_sided', 70, 0.25, 1.0, true)
ON CONFLICT (parameter_id) DO NOTHING;

-- Insert health index combination rules
INSERT INTO health_index_combinations (combination_name, rule_type, parameters, threshold, penalty, is_active) VALUES
('Metabolic Syndrome', 'all_out', ARRAY['P5', 'P7', 'P10'], NULL, 15.0, true),
('Cardiovascular Risk', 'any_two', ARRAY['P7', 'P8', 'P19', 'P20'], NULL, 10.0, true),
('Liver Function Alert', 'all_out', ARRAY['P11', 'P12'], NULL, 8.0, true),
('Kidney Function Alert', 'all_out', ARRAY['P13', 'P14'], NULL, 8.0, true),
('Diabetes Risk', 'all_out', ARRAY['P5', 'P6'], NULL, 12.0, true);

-- Create demo users (optional - comment out if not needed)
INSERT INTO users (user_id, email, first_name, last_name, date_of_birth, gender, company_id, uhid) VALUES
('DEMO001', 'john.doe@democorp.com', 'John', 'Doe', '1985-05-15', 'Male', 'DEMO001', 'UH20250901001'),
('DEMO002', 'jane.smith@democorp.com', 'Jane', 'Smith', '1990-08-22', 'Female', 'DEMO001', 'UH20250901002')
ON CONFLICT (user_id) DO NOTHING;

-- =====================================================
-- FINAL SETUP
-- =====================================================

-- Grant permissions
GRANT ALL PRIVILEGES ON ALL TABLES IN SCHEMA public TO postgres;
GRANT ALL PRIVILEGES ON ALL SEQUENCES IN SCHEMA public TO postgres;

-- =====================================================
-- VERIFICATION QUERIES
-- =====================================================

-- Check all tables are created
DO $$
BEGIN
    RAISE NOTICE 'Tables created:';
    RAISE NOTICE 'admin_users table has username column: %', 
        EXISTS(SELECT 1 FROM information_schema.columns 
               WHERE table_name='admin_users' AND column_name='username');
END $$;

-- Display summary
SELECT 
    'Setup Complete' as status,
    (SELECT COUNT(*) FROM information_schema.tables WHERE table_schema = 'public') as total_tables,
    (SELECT COUNT(*) FROM companies) as companies,
    (SELECT COUNT(*) FROM admin_users) as admin_users,
    (SELECT COUNT(*) FROM parameter_master) as parameters,
    (SELECT COUNT(*) FROM parameter_categories) as categories;

-- =====================================================
-- IMPORTANT NOTES FOR CLIENT
-- =====================================================
-- 1. The admin_users table includes a 'username' column (line 103)
-- 2. Default passwords are hashed with bcrypt:
--    - Admin password: 'admin123' 
--    - Corporate password: 'corp123'
-- 3. To generate your own password hashes:
--    Node.js: const bcrypt = require('bcrypt'); 
--             const hash = bcrypt.hashSync('yourpassword', 10);
-- 4. The system requires at least one admin user to function
-- 5. All foreign key relationships are properly configured
-- 6. Indexes are created for optimal performance
-- =====================================================